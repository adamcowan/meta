#!/usr/bin/python

import argparse
import ctypes
import hashlib
import itertools
import sys
import zlib

try:
    import crcmod
except ImportError:
    crcmod = None

def pad(data, num, c='\0'):
    align = num - len(data) % num
    if align != num:
        return data + align * c
    else:
        return data

def negate(n):
    return n ^ (2 ** 32 - 1)

def _hex(n):
    h = hex(n).rstrip('L')
    if len(h) % 2:
        h = '0x0' + h[2:]

    return h

def netgear(data):
    total = sum(ord(c) for c in data[::2])
    chk = (total & 0xFFFF) + (total >> 16)
    chk = ~((chk >> 16) + chk) & 0xFFFF
    return chk

def checksums(data, use_all=True):
    sums = {}
    if use_all and crcmod:
        names = [c[0] for c in crcmod.predefined._crc_definitions_table]
        for name in names:
            crc = crcmod.predefined.Crc(name)
            crc.update(data)
            sums[name] = _hex(crc.crcValue)
    else:
        crc32 = ctypes.c_uint32(zlib.crc32(data)).value
        sums['crc32'] = _hex(crc32)
        sums['crc32~'] = _hex(negate(crc32))

    if use_all:
        adler32 = ctypes.c_uint32(zlib.adler32(data)).value
        sums['adler32'] = _hex(adler32)

    sums['netgear'] = _hex(netgear(data))
    normal = ('md5', 'sha1')
    openssl = ('md4', 'mdc2', 'rmd160', 'sha')
    extra = ('sha224', 'sha256', 'sha384', 'sha512') + openssl
    for name in normal + extra:
        if not (name in extra) or use_all:
            try:
                func = hashlib.new(name)
                func.update(data)
                sums[name] = '0x' + func.hexdigest()
            except:
                import traceback
                print traceback.format_exc()
                pass

    return sums

filters = {
    'stripped': lambda x: x.strip(),
    'null-stripped': lambda x: x.strip('\0'),
    '0xFF-stripped': lambda x: x.strip('\xFF'),
    '8-byte null-padded': lambda x: pad(x, 8),
    '8-byte 0xFF-padded': lambda x: pad(x, 8, c='\xFF'),
}

def shotsum(data, use_all=False):
    sections = {}
    already = set()
    for i in xrange(len(filters)):
        for choices in itertools.permutations(filters, i):
            names = ', '.join(choices)
            mangled = data
            for name in choices:
                data = filters[name](mangled)

            if mangled in already:
                continue
            else:
                sections[names] = checksums(mangled, use_all=use_all)
                already.add(mangled)

    return sections

def pretty(data, use_all=False):
    sums = shotsum(data, use_all=use_all)
    for name, section in sorted(sums.items()):
        print
        if name:
            print '%s:' % name
        else:
            print 'unmodified:'

        longest = max(len(k) for k in section.keys())
        for key, value in sorted(section.items()):
            print '  %s: %s' % (key.rjust(longest), value)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='run multiple checksums/hashes against input')
    parser.add_argument('-a', '--all',
        help='Use all available algorithms', action='store_true')
    parser.add_argument('filename',
        help='Input file (can also use stdin).', nargs='?')
    args = parser.parse_args()

    if sys.stdin.isatty():
        if args.filename:
            with open(args.filename) as f:
                pretty(f.read(), use_all=args.all)
        else:
            parser.print_help()
            sys.exit(1)

    else:
        pretty(sys.stdin.read(), use_all=args.all)
